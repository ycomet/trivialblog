// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.ylabs.trivialblog.web;

import java.io.UnsupportedEncodingException;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import org.ylabs.trivialblog.Post;

privileged aspect PostController_Roo_Controller {
    
	private static final int DEFAULT_PAGE_SIZE = 5;
	private static final String DEFAULT_SORT_FIELD = "dateCreated";
	private static final String DEFAULT_SORT_ORDER = "desc";
	
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PostController.create(@Valid Post post, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, post);
            return "posts/create";
        }
        uiModel.asMap().clear();
        post.persist();
        return "redirect:/posts/" + encodeUrlPathSegment(post.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PostController.createForm(Model uiModel) {
        Post post = new Post();
        post.setDateCreated(Calendar.getInstance().getTime());
        populateEditForm(uiModel, post);
        return "posts/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PostController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("post", Post.findPost(id));
        uiModel.addAttribute("itemId", id);
        return "posts/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PostController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {

    	int sizeNo = size == null ? DEFAULT_PAGE_SIZE : size.intValue();
        String sortFieldNo = StringUtils.isEmpty(sortFieldName) ? DEFAULT_SORT_FIELD : sortFieldName;
        String sortOrderNo = StringUtils.isEmpty(sortOrder) ? DEFAULT_SORT_ORDER : sortOrder;
            
        final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
        uiModel.addAttribute("posts", Post.findPostEntries(firstResult, sizeNo, sortFieldNo, sortOrderNo));
        float nrOfPages = (float) Post.countPosts() / sizeNo;
        uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
 
        addDateTimeFormatPatterns(uiModel);
        return "posts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PostController.update(@Valid Post post, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, post);
            return "posts/update";
        }
        uiModel.asMap().clear();
        post.merge();
        return "redirect:/posts/" + encodeUrlPathSegment(post.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PostController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Post.findPost(id));
        return "posts/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PostController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Post post = Post.findPost(id);
        post.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/posts";
    }
    
    void PostController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("post_datecreated_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PostController.populateEditForm(Model uiModel, Post post) {
        uiModel.addAttribute("post", post);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String PostController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
